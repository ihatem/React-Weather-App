{"version":3,"sources":["components/Helper.js","components/head.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["highlight","matchItem","query","createMarkup","html","__html","replace","RegExp","Head","submitLocal","_this","props","getGeoPos","getWeather","submitData","data","position","lat","item","lon","lng","name","document","querySelector","value","getData","searchText","toLowerCase","cities","filter","x","startsWith","args","label","react_default","a","createElement","className","style","width","dangerouslySetInnerHTML","getEmojiFlag","country","this","dist_default","containerCssClass","selectedTextAttr","renderItem","maxItemsToRender","itemSelected","type","placeholder","id","onClick","Component","Weather","state","celOn","switchCel","setState","build_default","icon","temp","color","size","animate","summary","subSummary","react_countup_build_default","start","fahr","cel","end","duration","_ref","countUpRef","ref","wind","humidity","API_KEY","process","App","undefined","_callee","geo","url","regenerator_default","wrap","_context","prev","next","concat","axios","get","then","res","prevState","Object","objectSpread","timezone","Math","round","currently","temperature","windSpeed","hourly","toUpperCase","catch","err","console","error","stop","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","alert","head","weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.3959b99e.chunk.js","sourcesContent":["import React from 'react';\n\nexport function getFormattedCode(getCode) {\n    return (\n        <div className=\"code-container\">\n            <div>\n                <h6>JavaScript</h6>\n                <pre>\n                    <code className=\"language-jsx\">\n                        {getCode()}\n                    </code>\n                </pre>\n            </div>\n        </div>\n    );\n}\n\n/**\n * Highlights text that matches matchItem\n * Adapted from AngularUI Bootstrap Typeahead\n * See https://github.com/angular-ui/bootstrap/blob/master/src/typeahead/typeahead.js#L669\n */\nexport function highlight(matchItem, query) {\n    function escapeRegexp(queryToEscape) {\n        // Regex: capture the whole query string and replace it with the string that will be used to match\n        // the results, for example if the capture is \"a\" the result will be \\a\n        return ('' + queryToEscape).replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1');\n    }\n\n    //https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml\n    function createMarkup(html) {\n        return { __html: html };\n    };\n\n    // Replaces the capture string with a the same string inside of a \"<span>\" tag\n    if (query && matchItem) {\n        var wrapped = ('' + matchItem).replace(new RegExp(escapeRegexp(query), 'gi'), '<span class=\"search-text-highlight\">$&</span>');\n\n        return createMarkup(wrapped);\n    }\n\n    return createMarkup(matchItem);\n}\n","import React, { Component } from 'react';\nimport AutoComplete from '@vickram/react-auto-complete';\nimport cities from 'cities.json';\nimport { highlight } from './Helper'\nimport { getEmojiFlag } from 'countries-list'\n\n\nclass Head extends Component {\n\n  submitLocal = () => {\n    this.props.getGeoPos();\n    this.props.getWeather(true); \n  } \n\n  submitData = (data) => {\n    this.props.position.lat = data.item.lat; \n    this.props.position.lon = data.item.lng; \n    this.props.getWeather(false);\n    this.props.position.name = data.item.name;\n    document.querySelector(\".cityInput\").value = \"\"; \n  }\n\n  getData = (searchText) => {\n    searchText = searchText.toLowerCase();\n    return cities.filter(x => x.name.toLowerCase().startsWith(searchText));\n  }\n\n  renderItem(args) {\n    const data = args.data;\n\n    return ({\n      value: data.name,\n      label: <table className='auto-complete'>\n        <tbody>\n          <tr>\n            <td style={{ width: '60%' }} dangerouslySetInnerHTML={highlight(data.name, args.searchText)}></td>\n            <td style={{ width: '40%' }}>{getEmojiFlag(data.country)}</td>\n          </tr>\n        </tbody>\n      </table>\n    });\n  }\n\n\n  \n  render() {\n    return (\n      <div className=\"head\">\n        <h3 className=\"city\">{this.props.position.name}</h3>\n        <form>\n          <AutoComplete\n            containerCssClass=\"color-codes\"\n            selectedTextAttr=\"name\"\n            data={this.getData}\n            renderItem={this.renderItem}\n            maxItemsToRender={5}\n            itemSelected={this.submitData}\n          >\n            <input className=\"cityInput\" type=\"text\" placeholder=\"City name...\" />\n          </AutoComplete>\n          <span id=\"geo\" onClick={this.submitLocal}></span>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Head;\n","import React, { Component } from 'react';\nimport ReactAnimatedWeather from 'react-animated-weather';\nimport CountUp from 'react-countup';\n\nclass Weather extends Component {\n\n    state = {\n        celOn: true\n    }\n    \n    switchCel = () => {\n        this.setState({ celOn: !this.state.celOn })\n    }\n\n    render() {\n        return (\n            <div className=\"weather\">\n                <div className=\"visual\">\n                    <ReactAnimatedWeather\n                        icon={this.props.temp.icon}\n                        color='#22A7F0'\n                        size='300'\n                        animate='true'\n                    />\n                    <div className=\"text\">\n                        <h3>{this.props.temp.summary}</h3>\n                        <p>{this.props.temp.subSummary}</p>\n                    </div>\n                </div>\n                <div className=\"figures\">\n                    <div className=\"figuresWrap\">\n                        <div className=\"mainFigureWrap\">\n                            <CountUp\n                                start={!this.state.celOn ? this.props.temp.cel : this.props.temp.fahr}\n                                end={this.state.celOn ? this.props.temp.cel : this.props.temp.fahr}\n                                duration={2}\n                                >\n                                {({ countUpRef, start }) => (\n                                    <h1 ref={countUpRef}></h1>\n                                )}\n                            </CountUp> \n                        </div>\n                        <div onClick={this.switchCel} className=\"CelSwitchWrap\">\n                            <div className={\"CelSwitch\" + (this.state.celOn ? \"\" : \" transition\")}>\n                                <h3>C°</h3>\n                                <h3>F°</h3>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"addFigures\">\n                        <div className=\"wind\">\n                            <span></span>\n                            <p>{this.props.temp.wind} m/s</p>\n                        </div>\n                        <div className=\"humidity\">\n                            <span></span>\n                            <p>{this.props.temp.humidity}%</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Weather;\n","import React, { Component } from \"react\";\nimport Head from \"./components/head\";\nimport Weather from \"./components/weather\";\n\nimport axios from \"axios\";\n\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\n\nclass App extends Component {\n  state = {\n    position: {\n      lat: undefined,\n      lon: undefined,\n      name: undefined\n    },\n    temp: {\n      fahr: undefined,\n      cel: undefined,\n      humidity: undefined,\n      wind: undefined,\n      summary: undefined,\n      subSummary: undefined,\n      icon: \"CLEAR_DAY\"\n    }\n  };\n\n  getWeather = async geo => {\n    const proxy = \"https://cors-anywhere.herokuapp.com/\";\n    const url = `${proxy}https://api.darksky.net/forecast/${API_KEY}/${this.state.position.lat},${this.state.position.lon}`;\n\n    axios\n      .get(url)\n      .then(res => {\n        const { data } = res;\n        this.setState(prevState => ({\n          position: {\n            ...prevState.position,\n            name: geo ? data.timezone : this.state.position.name\n          },\n          temp: {\n            fahr: Math.round(data.currently.temperature),\n            cel: Math.round(((data.currently.temperature - 32) * 5) / 9),\n            humidity: data.currently.humidity,\n            wind: data.currently.windSpeed,\n            summary: data.currently.summary,\n            subSummary: data.hourly.summary,\n            icon: data.currently.icon.replace(/-/g, \"_\").toUpperCase()\n          }\n        }));\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  };\n\n  getGeoPos = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(pos => {\n        this.setState(prevState => ({\n          position: {\n            ...prevState.position,\n            lat: pos.coords.latitude,\n            lon: pos.coords.longitude\n          },\n          temp: {\n            ...prevState.temp\n          }\n        }));\n        this.getWeather(true);\n      });\n    } else {\n      alert(\"Geolocation is not supported by this browser.\");\n    }\n  };\n\n  componentDidMount() {\n    this.getGeoPos();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Head\n          position={this.state.position}\n          temp={this.state.temp}\n          getWeather={this.getWeather}\n          getGeoPos={this.getGeoPos}\n        />\n        <Weather\n          position={this.state.position}\n          temp={this.state.temp}\n          getWeather={this.getWeather}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/main.sass\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n//serviceWorker.register();\n"],"sourceRoot":""}